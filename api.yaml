openapi: '3.0.3'
info:
  title: Kamiouji1 blog API
  version: '1.0'
  contact:
    name: edmogc@gmail.com
servers:
  - url: http://localhost:8080/api
    description: Servidor de Teste
paths:
  /usuarios/login:
    post:
      operationId: userLogin
      summary: Realiza autenticação na API
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: foo@bar.com
                senha:
                  type: string
                  example: muitoseguro
      tags:
        - Autenticação
      responses:
        '200':
          description: Autenticado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  accesstoken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImVtYWlsIjoiY2FpeGFwcmV0YUBnbWFpbC5jb20iLCJ
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'

  /usuarios:
    get:
      operationId: getUsuarios
      summary: Obtém todos os usuários do sistema
      tags:
      - Usuarios
      responses:
        '200':
          description: Lista de usuários
          content:
            application/json:
              schema:
                type: object
                properties:
                  usuarios:
                    type: array
                    items:
                      $ref: '#/components/schemas/Usuario'
    delete:
      description: Remove um usuário do sistema pelo ID
      operationId: deleteUserByID
      summary: Deleta o usuario pelo ID
      tags:
      - Usuarios
      parameters:
        - in: path
          name: id
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Usuário deletado com sucesso"
        '400': 
          description: 400 Bad Request
          content:
            application/json:
             schema:
               $ref: '#/components/schemas/Erro'

  /usuarios/{id}:
    get:
      operationId: getById
      tags:
      - Usuarios
      summary: Obtém um usuario a partir do seu id
      
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  usuario:
                    type: object 
                    $ref: '#/components/schemas/Usuario'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'

  /posts:
    post:
      description: Adiciona uma postagem no Blog
      operationId: postPost
      summary: Adiciona um post
      tags:
        - Autenticação
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: OK
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
        '403':
          description: Acesso Negado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Usuario:
      type: object
      properties:
        id:
          type: integer
          description: Id do usuário
          example: 9
        email:
          type: string
          description: E-mail do usuário
          example: foo@baa.com.br
    Post:
      type: object
      properties:
        titulo:
          type: string
          example: Titulo do seu post
        texto:
          type: string
          example: Texto do seu post
        userId:
          type: integer
          example: 9
    Erro:
      type: object
      properties:
        msg:
          type: string
          description: Mensagem de Erro
          example: Usuário não encontrado!

security:
  - BearerAuth: []